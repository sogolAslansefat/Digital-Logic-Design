/* Generated by Yosys 0.7 (git sha1 61f6811, i686-w64-mingw32.static-gcc 4.9.3 -Os) */

module DMUX(clk, serIn, dcden, d, P);
  wire [3:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  output [3:0] P;
  input clk;
  input [1:0] d;
  input dcden;
  input serIn;
  NOT _27_ (
    .A(_25_),
    .Y(_26_)
  );
  NOT _28_ (
    .A(_10_),
    .Y(_13_)
  );
  NOT _29_ (
    .A(_11_),
    .Y(_14_)
  );
  NOR _30_ (
    .A(_14_),
    .B(_13_),
    .Y(_15_)
  );
  NAND _31_ (
    .A(_15_),
    .B(_24_),
    .Y(_17_)
  );
  NOR _32_ (
    .A(_17_),
    .B(_26_),
    .Y(_12_)
  );
  NAND _33_ (
    .A(_11_),
    .B(_10_),
    .Y(_19_)
  );
  NOT _34_ (
    .A(_24_),
    .Y(_21_)
  );
  NAND _35_ (
    .A(_25_),
    .B(_21_),
    .Y(_22_)
  );
  NOR _36_ (
    .A(_22_),
    .B(_19_),
    .Y(_16_)
  );
  NOR _37_ (
    .A(_17_),
    .B(_25_),
    .Y(_18_)
  );
  NAND _38_ (
    .A(_26_),
    .B(_21_),
    .Y(_23_)
  );
  NOR _39_ (
    .A(_23_),
    .B(_19_),
    .Y(_20_)
  );
  DFF _40_ (
    .C(clk),
    .D(_00_[0]),
    .Q(P[0])
  );
  DFF _41_ (
    .C(clk),
    .D(_00_[1]),
    .Q(P[1])
  );
  DFF _42_ (
    .C(clk),
    .D(_00_[2]),
    .Q(P[2])
  );
  DFF _43_ (
    .C(clk),
    .D(_00_[3]),
    .Q(P[3])
  );
  assign _10_ = dcden;
  assign _11_ = serIn;
  assign _24_ = d[0];
  assign _25_ = d[1];
  assign _00_[0] = _12_;
  assign _00_[1] = _16_;
  assign _00_[2] = _18_;
  assign _00_[3] = _20_;
endmodule

module MSSD(serIn, clk, rst, d, p, outValid, error);
  wire Q;
  wire cen1;
  wire cen2;
  input clk;
  wire co1;
  wire co2;
  output [1:0] d;
  output error;
  wire init;
  wire ld1;
  wire ld2;
  wire [3:0] n;
  output outValid;
  output [0:3] p;
  input rst;
  input serIn;
  wire shen;
  myDFF Dfliplop (
    .Q(Q),
    .clk(clk),
    .ld2(ld2),
    .rst(rst)
  );
  ctrlr controlunit (
    .cen1(cen1),
    .cen2(cen2),
    .clk(clk),
    .co1(co1),
    .co2(co2),
    .error(error),
    .init(init),
    .ld1(ld1),
    .ld2(ld2),
    .n(n),
    .outValid(outValid),
    .rst(rst),
    .serIn(serIn),
    .shen(shen)
  );
  DMUX demultiplexer (
    .P(p),
    .clk(clk),
    .d(d),
    .dcden(outValid),
    .serIn(serIn)
  );
  cnt128 mod128counter (
    .Q(Q),
    .cen2(cen2),
    .clk(clk),
    .co2(co2),
    .n(n),
    .rst(rst)
  );
  cnt8 mod8counter (
    .cen1(cen1),
    .clk(clk),
    .co1(co1),
    .ld1(ld1),
    .rst(rst)
  );
  ShfReg shiftregister (
    .clk(clk),
    .d(d),
    .init(init),
    .n(n),
    .rst(rst),
    .serIn(serIn),
    .shen(shen)
  );
endmodule

module ShfReg(clk, rst, serIn, shen, init, n, d);
  wire [7:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  input clk;
  output [1:0] d;
  input init;
  output [3:0] n;
  wire [7:0] po3;
  input rst;
  input serIn;
  input shen;
  NOT _49_ (
    .A(_30_),
    .Y(_14_)
  );
  NOT _50_ (
    .A(_39_),
    .Y(_15_)
  );
  NOR _51_ (
    .A(_15_),
    .B(_14_),
    .Y(_17_)
  );
  NOT _52_ (
    .A(_20_),
    .Y(_19_)
  );
  NOR _53_ (
    .A(_39_),
    .B(_19_),
    .Y(_21_)
  );
  NOR _54_ (
    .A(_21_),
    .B(_17_),
    .Y(_23_)
  );
  NOR _55_ (
    .A(_23_),
    .B(_08_),
    .Y(_46_)
  );
  NOR _56_ (
    .A(_15_),
    .B(_19_),
    .Y(_24_)
  );
  NOT _57_ (
    .A(_47_),
    .Y(_25_)
  );
  NOR _58_ (
    .A(_25_),
    .B(_39_),
    .Y(_26_)
  );
  NOR _59_ (
    .A(_26_),
    .B(_24_),
    .Y(_27_)
  );
  NOR _60_ (
    .A(_27_),
    .B(_08_),
    .Y(_48_)
  );
  NOR _61_ (
    .A(_25_),
    .B(_15_),
    .Y(_28_)
  );
  NOT _62_ (
    .A(_09_),
    .Y(_29_)
  );
  NOR _63_ (
    .A(_29_),
    .B(_39_),
    .Y(_31_)
  );
  NOR _64_ (
    .A(_31_),
    .B(_28_),
    .Y(_32_)
  );
  NOR _65_ (
    .A(_32_),
    .B(_08_),
    .Y(_10_)
  );
  NOR _66_ (
    .A(_29_),
    .B(_15_),
    .Y(_33_)
  );
  NOT _67_ (
    .A(_11_),
    .Y(_34_)
  );
  NOR _68_ (
    .A(_34_),
    .B(_39_),
    .Y(_35_)
  );
  NOR _69_ (
    .A(_35_),
    .B(_33_),
    .Y(_36_)
  );
  NOR _70_ (
    .A(_36_),
    .B(_08_),
    .Y(_12_)
  );
  NOR _71_ (
    .A(_34_),
    .B(_15_),
    .Y(_37_)
  );
  NOT _72_ (
    .A(_13_),
    .Y(_38_)
  );
  NOR _73_ (
    .A(_38_),
    .B(_39_),
    .Y(_40_)
  );
  NOR _74_ (
    .A(_40_),
    .B(_37_),
    .Y(_41_)
  );
  NOR _75_ (
    .A(_41_),
    .B(_08_),
    .Y(_16_)
  );
  NOR _76_ (
    .A(_38_),
    .B(_15_),
    .Y(_42_)
  );
  NOT _77_ (
    .A(_18_),
    .Y(_43_)
  );
  NOR _78_ (
    .A(_43_),
    .B(_39_),
    .Y(_44_)
  );
  NOR _79_ (
    .A(_44_),
    .B(_42_),
    .Y(_45_)
  );
  NOR _80_ (
    .A(_45_),
    .B(_08_),
    .Y(_22_)
  );
  reg \po3_reg[0] ;
  always @(posedge clk or posedge rst)
    if (rst)
      \po3_reg[0]  <= 0;
    else
      \po3_reg[0]  <= _00_[0];
  assign po3[0] = \po3_reg[0] ;
  reg \po3_reg[1] ;
  always @(posedge clk or posedge rst)
    if (rst)
      \po3_reg[1]  <= 0;
    else
      \po3_reg[1]  <= _00_[1];
  assign po3[1] = \po3_reg[1] ;
  reg \po3_reg[2] ;
  always @(posedge clk or posedge rst)
    if (rst)
      \po3_reg[2]  <= 0;
    else
      \po3_reg[2]  <= _00_[2];
  assign po3[2] = \po3_reg[2] ;
  reg \po3_reg[3] ;
  always @(posedge clk or posedge rst)
    if (rst)
      \po3_reg[3]  <= 0;
    else
      \po3_reg[3]  <= _00_[3];
  assign po3[3] = \po3_reg[3] ;
  reg \po3_reg[4] ;
  always @(posedge clk or posedge rst)
    if (rst)
      \po3_reg[4]  <= 0;
    else
      \po3_reg[4]  <= _00_[4];
  assign po3[4] = \po3_reg[4] ;
  reg \po3_reg[5] ;
  always @(posedge clk or posedge rst)
    if (rst)
      \po3_reg[5]  <= 0;
    else
      \po3_reg[5]  <= _00_[5];
  assign po3[5] = \po3_reg[5] ;
  assign d = po3[5:4];
  assign n = po3[3:0];
  assign _08_ = init;
  assign _20_ = po3[0];
  assign _30_ = serIn;
  assign _39_ = shen;
  assign _00_[0] = _46_;
  assign _47_ = po3[1];
  assign _00_[1] = _48_;
  assign _09_ = po3[2];
  assign _00_[2] = _10_;
  assign _11_ = po3[3];
  assign _00_[3] = _12_;
  assign _13_ = po3[4];
  assign _00_[4] = _16_;
  assign _18_ = po3[5];
  assign _00_[5] = _22_;
endmodule

module cnt128(clk, rst, cen2, Q, n, co2);
  wire [6:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  input Q;
  input cen2;
  input clk;
  output co2;
  input [3:0] n;
  reg [6:0] po2;
  input rst;
  NOT _111_ (
    .A(_106_),
    .Y(_043_)
  );
  NOT _112_ (
    .A(_038_),
    .Y(_044_)
  );
  NOT _113_ (
    .A(_036_),
    .Y(_045_)
  );
  NOT _114_ (
    .A(_052_),
    .Y(_046_)
  );
  NOT _115_ (
    .A(_065_),
    .Y(_048_)
  );
  NOR _116_ (
    .A(_048_),
    .B(_046_),
    .Y(_049_)
  );
  NAND _117_ (
    .A(_049_),
    .B(_035_),
    .Y(_050_)
  );
  NOR _118_ (
    .A(_050_),
    .B(_045_),
    .Y(_051_)
  );
  NAND _119_ (
    .A(_051_),
    .B(_037_),
    .Y(_054_)
  );
  NOR _120_ (
    .A(_054_),
    .B(_044_),
    .Y(_056_)
  );
  NAND _121_ (
    .A(_056_),
    .B(_096_),
    .Y(_057_)
  );
  NOR _122_ (
    .A(_057_),
    .B(_043_),
    .Y(_039_)
  );
  NOR _123_ (
    .A(_065_),
    .B(_052_),
    .Y(_058_)
  );
  NOT _124_ (
    .A(_040_),
    .Y(_059_)
  );
  NAND _125_ (
    .A(_065_),
    .B(_052_),
    .Y(_061_)
  );
  NAND _126_ (
    .A(_061_),
    .B(_059_),
    .Y(_062_)
  );
  NOR _127_ (
    .A(_062_),
    .B(_058_),
    .Y(_041_)
  );
  NOT _128_ (
    .A(_035_),
    .Y(_064_)
  );
  NOR _129_ (
    .A(_061_),
    .B(_064_),
    .Y(_066_)
  );
  NAND _130_ (
    .A(_061_),
    .B(_064_),
    .Y(_067_)
  );
  NAND _131_ (
    .A(_067_),
    .B(_059_),
    .Y(_068_)
  );
  NOR _132_ (
    .A(_068_),
    .B(_066_),
    .Y(_042_)
  );
  NOR _133_ (
    .A(_066_),
    .B(_036_),
    .Y(_070_)
  );
  NAND _134_ (
    .A(_066_),
    .B(_036_),
    .Y(_071_)
  );
  NAND _135_ (
    .A(_071_),
    .B(_059_),
    .Y(_073_)
  );
  NOR _136_ (
    .A(_073_),
    .B(_070_),
    .Y(_047_)
  );
  NOT _137_ (
    .A(_037_),
    .Y(_074_)
  );
  NOR _138_ (
    .A(_071_),
    .B(_074_),
    .Y(_075_)
  );
  NOR _139_ (
    .A(_051_),
    .B(_037_),
    .Y(_076_)
  );
  NOR _140_ (
    .A(_076_),
    .B(_075_),
    .Y(_077_)
  );
  NOR _141_ (
    .A(_077_),
    .B(_040_),
    .Y(_079_)
  );
  NOR _142_ (
    .A(_053_),
    .B(_059_),
    .Y(_080_)
  );
  NOR _143_ (
    .A(_080_),
    .B(_079_),
    .Y(_055_)
  );
  NAND _144_ (
    .A(_075_),
    .B(_038_),
    .Y(_082_)
  );
  NOR _145_ (
    .A(_075_),
    .B(_038_),
    .Y(_083_)
  );
  NOR _146_ (
    .A(_083_),
    .B(_040_),
    .Y(_084_)
  );
  NAND _147_ (
    .A(_084_),
    .B(_082_),
    .Y(_085_)
  );
  NAND _148_ (
    .A(_060_),
    .B(_053_),
    .Y(_086_)
  );
  NOR _149_ (
    .A(_060_),
    .B(_053_),
    .Y(_087_)
  );
  NOR _150_ (
    .A(_087_),
    .B(_059_),
    .Y(_088_)
  );
  NAND _151_ (
    .A(_088_),
    .B(_086_),
    .Y(_089_)
  );
  NAND _152_ (
    .A(_089_),
    .B(_085_),
    .Y(_063_)
  );
  NOT _153_ (
    .A(_069_),
    .Y(_090_)
  );
  NOR _154_ (
    .A(_087_),
    .B(_090_),
    .Y(_091_)
  );
  NAND _155_ (
    .A(_087_),
    .B(_090_),
    .Y(_092_)
  );
  NOT _156_ (
    .A(_092_),
    .Y(_093_)
  );
  NOR _157_ (
    .A(_093_),
    .B(_091_),
    .Y(_094_)
  );
  NOR _158_ (
    .A(_094_),
    .B(_059_),
    .Y(_095_)
  );
  NOT _159_ (
    .A(_096_),
    .Y(_097_)
  );
  NOR _160_ (
    .A(_082_),
    .B(_097_),
    .Y(_098_)
  );
  NOR _161_ (
    .A(_056_),
    .B(_096_),
    .Y(_099_)
  );
  NOR _162_ (
    .A(_099_),
    .B(_098_),
    .Y(_100_)
  );
  NOR _163_ (
    .A(_100_),
    .B(_040_),
    .Y(_101_)
  );
  NOR _164_ (
    .A(_101_),
    .B(_095_),
    .Y(_072_)
  );
  NOT _165_ (
    .A(_078_),
    .Y(_102_)
  );
  NAND _166_ (
    .A(_092_),
    .B(_102_),
    .Y(_103_)
  );
  NAND _167_ (
    .A(_093_),
    .B(_078_),
    .Y(_104_)
  );
  NAND _168_ (
    .A(_104_),
    .B(_103_),
    .Y(_105_)
  );
  NAND _169_ (
    .A(_105_),
    .B(_040_),
    .Y(_107_)
  );
  NAND _170_ (
    .A(_057_),
    .B(_043_),
    .Y(_108_)
  );
  NOR _171_ (
    .A(_039_),
    .B(_040_),
    .Y(_109_)
  );
  NAND _172_ (
    .A(_109_),
    .B(_108_),
    .Y(_110_)
  );
  NAND _173_ (
    .A(_110_),
    .B(_107_),
    .Y(_081_)
  );
  always @(posedge clk or posedge rst)
    if (rst)
      po2[0] <= 0;
    else
      po2[0] <= _000_[0];
  always @(posedge clk or posedge rst)
    if (rst)
      po2[1] <= 0;
    else
      po2[1] <= _000_[1];
  always @(posedge clk or posedge rst)
    if (rst)
      po2[2] <= 0;
    else
      po2[2] <= _000_[2];
  always @(posedge clk or posedge rst)
    if (rst)
      po2[3] <= 0;
    else
      po2[3] <= _000_[3];
  always @(posedge clk or posedge rst)
    if (rst)
      po2[4] <= 0;
    else
      po2[4] <= _000_[4];
  always @(posedge clk or posedge rst)
    if (rst)
      po2[5] <= 0;
    else
      po2[5] <= _000_[5];
  always @(posedge clk or posedge rst)
    if (rst)
      po2[6] <= 0;
    else
      po2[6] <= _000_[6];
  assign _035_ = po2[1];
  assign _036_ = po2[2];
  assign _052_ = cen2;
  assign _065_ = po2[0];
  assign _096_ = po2[5];
  assign _106_ = po2[6];
  assign _037_ = po2[3];
  assign _038_ = po2[4];
  assign co2 = _039_;
  assign _040_ = Q;
  assign _000_[0] = _041_;
  assign _000_[1] = _042_;
  assign _000_[2] = _047_;
  assign _053_ = n[0];
  assign _000_[3] = _055_;
  assign _060_ = n[1];
  assign _000_[4] = _063_;
  assign _069_ = n[2];
  assign _000_[5] = _072_;
  assign _078_ = n[3];
  assign _000_[6] = _081_;
endmodule

module cnt8(clk, rst, cen1, ld1, co1);
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  input cen1;
  input clk;
  output co1;
  input ld1;
  reg [2:0] po1;
  input rst;
  NOT _34_ (
    .A(_10_),
    .Y(_12_)
  );
  NAND _35_ (
    .A(_30_),
    .B(_29_),
    .Y(_13_)
  );
  NOR _36_ (
    .A(_13_),
    .B(_12_),
    .Y(_15_)
  );
  NAND _37_ (
    .A(_15_),
    .B(_11_),
    .Y(_16_)
  );
  NOT _38_ (
    .A(_16_),
    .Y(_31_)
  );
  NOR _39_ (
    .A(_30_),
    .B(_29_),
    .Y(_17_)
  );
  NOT _40_ (
    .A(_32_),
    .Y(_18_)
  );
  NAND _41_ (
    .A(_13_),
    .B(_18_),
    .Y(_20_)
  );
  NOR _42_ (
    .A(_20_),
    .B(_17_),
    .Y(_33_)
  );
  NOT _43_ (
    .A(_29_),
    .Y(_21_)
  );
  NOT _44_ (
    .A(_30_),
    .Y(_22_)
  );
  NOR _45_ (
    .A(_22_),
    .B(_21_),
    .Y(_23_)
  );
  NAND _46_ (
    .A(_23_),
    .B(_10_),
    .Y(_24_)
  );
  NAND _47_ (
    .A(_13_),
    .B(_12_),
    .Y(_25_)
  );
  NAND _48_ (
    .A(_25_),
    .B(_24_),
    .Y(_26_)
  );
  NAND _49_ (
    .A(_26_),
    .B(_18_),
    .Y(_14_)
  );
  NOR _50_ (
    .A(_15_),
    .B(_11_),
    .Y(_27_)
  );
  NAND _51_ (
    .A(_16_),
    .B(_18_),
    .Y(_28_)
  );
  NOR _52_ (
    .A(_28_),
    .B(_27_),
    .Y(_19_)
  );
  always @(posedge clk or posedge rst)
    if (rst)
      po1[0] <= 0;
    else
      po1[0] <= _00_[0];
  always @(posedge clk or posedge rst)
    if (rst)
      po1[1] <= 0;
    else
      po1[1] <= _00_[1];
  always @(posedge clk or posedge rst)
    if (rst)
      po1[2] <= 0;
    else
      po1[2] <= _00_[2];
  assign _10_ = po1[1];
  assign _11_ = po1[2];
  assign _29_ = cen1;
  assign _30_ = po1[0];
  assign co1 = _31_;
  assign _32_ = ld1;
  assign _00_[0] = _33_;
  assign _00_[1] = _14_;
  assign _00_[2] = _19_;
endmodule

module ctrlr(clk, rst, serIn, co1, co2, n, error, outValid, init, shen, ld1, ld2, cen1, cen2);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  output cen1;
  output cen2;
  input clk;
  input co1;
  input co2;
  output error;
  output init;
  output ld1;
  output ld2;
  input [3:0] n;
  wire [2:0] n_state;
  output outValid;
  wire [2:0] p_state;
  input rst;
  input serIn;
  output shen;
  NOT _36_ (
    .A(_12_),
    .Y(_15_)
  );
  NOT _37_ (
    .A(_13_),
    .Y(_16_)
  );
  NOR _38_ (
    .A(_16_),
    .B(_15_),
    .Y(_21_)
  );
  NOR _39_ (
    .A(_13_),
    .B(_15_),
    .Y(_32_)
  );
  NOR _40_ (
    .A(_16_),
    .B(_12_),
    .Y(_33_)
  );
  NOR _41_ (
    .A(_13_),
    .B(_12_),
    .Y(_34_)
  );
  NOT _42_ (
    .A(_17_),
    .Y(_18_)
  );
  NAND _43_ (
    .A(_33_),
    .B(_18_),
    .Y(_20_)
  );
  NOT _44_ (
    .A(_14_),
    .Y(_22_)
  );
  NAND _45_ (
    .A(_32_),
    .B(_22_),
    .Y(_23_)
  );
  NOR _46_ (
    .A(_33_),
    .B(_35_),
    .Y(_25_)
  );
  NAND _47_ (
    .A(_25_),
    .B(_23_),
    .Y(_26_)
  );
  NAND _48_ (
    .A(_26_),
    .B(_20_),
    .Y(_19_)
  );
  NAND _49_ (
    .A(_33_),
    .B(_17_),
    .Y(_27_)
  );
  NAND _50_ (
    .A(_22_),
    .B(_16_),
    .Y(_28_)
  );
  NOR _51_ (
    .A(_28_),
    .B(_15_),
    .Y(_29_)
  );
  NOR _52_ (
    .A(_35_),
    .B(_15_),
    .Y(_30_)
  );
  NOR _53_ (
    .A(_30_),
    .B(_29_),
    .Y(_31_)
  );
  NAND _54_ (
    .A(_31_),
    .B(_27_),
    .Y(_24_)
  );
  reg \p_state_reg[0] ;
  always @(posedge clk or posedge rst)
    if (rst)
      \p_state_reg[0]  <= 0;
    else
      \p_state_reg[0]  <= n_state[0];
  assign p_state[0] = \p_state_reg[0] ;
  reg \p_state_reg[1] ;
  always @(posedge clk or posedge rst)
    if (rst)
      \p_state_reg[1]  <= 0;
    else
      \p_state_reg[1]  <= n_state[1];
  assign p_state[1] = \p_state_reg[1] ;
  assign ld1 = init;
  assign ld2 = cen1;
  assign n_state[2] = 1'b0;
  assign outValid = cen2;
  assign p_state[2] = 1'b0;
  assign shen = cen1;
  assign _12_ = p_state[1];
  assign _13_ = p_state[0];
  assign error = _21_;
  assign cen2 = _32_;
  assign cen1 = _33_;
  assign init = _34_;
  assign _35_ = serIn;
  assign _14_ = co2;
  assign _17_ = co1;
  assign n_state[0] = _19_;
  assign n_state[1] = _24_;
endmodule

module myDFF(clk, rst, ld2, Q);
  output Q;
  reg Q;
  input clk;
  input ld2;
  input rst;
  always @(posedge clk or posedge rst)
    if (rst)
      Q <= 0;
    else
      Q <= ld2;
endmodule
